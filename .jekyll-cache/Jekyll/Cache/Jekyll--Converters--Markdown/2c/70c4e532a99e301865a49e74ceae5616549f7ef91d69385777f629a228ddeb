I"Ë'<p>ÈíàÂØπRxjava2ÁöÑÁÆÄÂçïÂ∞ÅË£Ö<code class="highlighter-rouge">switchThread</code>
<code class="highlighter-rouge">map</code>
<code class="highlighter-rouge">concatMap </code>
<code class="highlighter-rouge">zip</code>Á≠âÊìç‰Ωú</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>**
 * Created by ngliaxl on 2018/4/9.
 *
 *         SimpleRxJava2.create(new SimpleRxJava2.EmitterCallback&lt;String&gt;() {
 *             @Override
 *             public void getEmitDatas(List&lt;String&gt; datas) throws Exception {
 *                 Log.d("OWEN", "getEmitDatas: 1111  " + Thread.currentThread().getName());
 *                 datas.add("1");
 *             }
 *         }).switchThread().concatMap(new SimpleRxJava2.FunctionCallback&lt;String, Integer&gt;() {
 *             @Override
 *             public SimpleRxJava2&lt;Integer&gt; apply(String s) throws Exception {
 *                 Log.d("OWEN", "apply:1111  " + Thread.currentThread().getName());
 *                 if(s.equals("")){
 *                     return null;
 *                 }else{
 *                     return SimpleRxJava2.create(new SimpleRxJava2.EmitterCallback&lt;Integer&gt;() {
 *                         @Override
 *                         public void getEmitDatas(List&lt;Integer&gt; datas) throws Exception {
 *                             Log.d("OWEN", "getEmitDatas: 2222  " + Thread.currentThread().getName());
 *                             datas.add(2);
 *                         }
 *                     }).switchThread();
 *                 }
 *             }
 *         }).concatMap(new SimpleRxJava2.FunctionCallback&lt;Integer, Boolean&gt;() {
 *             @Override
 *             public SimpleRxJava2&lt;Boolean&gt; apply(Integer integer) throws Exception {
 *                 Log.d("OWEN", "apply:2222  " + Thread.currentThread().getName());
 *
 *                 return SimpleRxJava2.create(new SimpleRxJava2.EmitterCallback&lt;Boolean&gt;() {
 *                     @Override
 *                     public void getEmitDatas(List&lt;Boolean&gt; datas) throws Exception {
 *                         Log.d("OWEN", "getEmitDatas: 3333  " + Thread.currentThread().getName());
 *                         datas.add(Boolean.TRUE);
 *                     }
 *                 }).switchThread();
 *             }
 *         })
 *           .deliveryResult(new SimpleRxJava2.ConsumerCallback&lt;Boolean&gt;(){
 *             @Override
 *             public void onReceive(Boolean data) {
 *                 Log.d("OWEN", "============= : " + data + Thread.currentThread().getName());
 *             }
 *         });
 */
public class SimpleRxJava2&lt;T&gt; {

    private Observable&lt;T&gt; mObservable;

    public SimpleRxJava2() {
    }

    public SimpleRxJava2(Observable&lt;T&gt; observable) {
        this.mObservable = observable;
    }


    public static &lt;T&gt; SimpleRxJava2&lt;T&gt; create(final EmitterCallback&lt;T&gt; callback) {
        Observable&lt;T&gt; observable = Observable.create(new ObservableOnSubscribe&lt;T&gt;() {
            @Override
            public void subscribe(ObservableEmitter&lt;T&gt; emitter) {
                List&lt;T&gt; datas = new ArrayList&lt;&gt;();
                Throwable trowable = null;
                try {
                    callback.getEmitDatas(datas);
                } catch (Exception e) {
                    e.printStackTrace();
                    trowable = e;
                } finally {
                    for (T data : datas) {
                        emitter.onNext(data);
                    }
                    if (!emitter.isDisposed() &amp;&amp; trowable != null) emitter.onError(trowable);
                    else emitter.onComplete();
                }
            }
        });
        return new SimpleRxJava2&lt;&gt;(observable);
    }

    public static &lt;T&gt; SimpleRxJava2&lt;T&gt; create2(final EmitterCallback&lt;T&gt; callback) {
        return create(callback).switchThread();
    }


    public static &lt;T&gt; SimpleRxJava2&lt;T&gt; empty() {
        return SimpleRxJava2.create(new SimpleRxJava2.EmitterCallback&lt;T&gt;() {
            @Override
            public void getEmitDatas(List&lt;T&gt; datas) {

            }
        }).switchThread();
    }


    public static &lt;T&gt; SimpleRxJava2&lt;T&gt; createFrom(final FutureCallback&lt;T&gt; callback) {
        ExecutorService service = Executors.newSingleThreadExecutor();
        final FutureTask&lt;T&gt; future = new FutureTask&lt;&gt;(new Callable&lt;T&gt;() {
            @Override
            public T call() throws InterruptedException {
                return callback.call();
            }
        });
        service.submit(future);
        Observable&lt;T&gt; observable = Observable.fromFuture(future);
        return new SimpleRxJava2&lt;&gt;(observable);
    }

    public static &lt;T&gt; T getFromFuture(final FutureCallback&lt;T&gt; callback) {
        final List&lt;T&gt; t = new ArrayList&lt;&gt;();
        SimpleRxJava2.createFrom(callback).deliveryResult(new ConsumerCallback&lt;T&gt;() {
            @Override
            public void onReceive(T data) {
                t.add(data);
            }
        });
        return t.isEmpty() ? null : t.get(0);
    }


    public &lt;Q&gt; SimpleRxJava2&lt;Q&gt; transform(final Transform&lt;T, Q&gt; callback) {
        Observable&lt;Q&gt; observable = getObservable().map(new Function&lt;T, Q&gt;() {
            @Override
            public Q apply(T t) throws Exception {
                return callback.apply(t);
            }
        });
        return new SimpleRxJava2&lt;&gt;(observable);
    }


    public &lt;Q&gt; SimpleRxJava2&lt;Q&gt; concatMap(final FunctionCallback&lt;T, Q&gt; callback) {
        Observable&lt;Q&gt; observable = getObservable().concatMap(new Function&lt;T, ObservableSource&lt;Q&gt;&gt;() {
            @Override
            public ObservableSource&lt;Q&gt; apply(T t) throws Exception {
                SimpleRxJava2&lt;Q&gt; apply = callback.apply(t);
                if (apply != null) return apply.getObservable();
                return null;
            }
        });
        return new SimpleRxJava2&lt;&gt;(observable);
    }


    public &lt;H, Q&gt; SimpleRxJava2&lt;T&gt; compose(SimpleRxJava2&lt;H&gt; s1, SimpleRxJava2&lt;Q&gt; s2, final
    ApplyCallback&lt;H, Q, T&gt; callback) {
        Observable&lt;T&gt; observable = Observable.zip(s1.getObservable(), s2.getObservable(), new
                BiFunction&lt;H, Q, T&gt;() {
                    @Override
                    public T apply(H h, Q q) throws Exception {
                        return callback.apply(h, q);
                    }
                });
        return new SimpleRxJava2&lt;&gt;(observable);
    }


    public SimpleRxJava2&lt;T&gt; deliveryResult(final ConsumerCallback&lt;T&gt; callback) {
        getObservable().subscribe(new Observer&lt;T&gt;() {
            @Override
            public void onSubscribe(Disposable d) {
                if (callback != null) {
                    callback.onStart(d);
                }
            }

            @Override
            public void onNext(T t) {
                if (callback != null) {
                    callback.onReceive(t);
                }
            }

            @Override
            public void onError(Throwable e) {
                if (!e.getMessage().contains("Future returned null")
                        &amp;&amp; !e.getMessage().contains("onNext called with null")) {
                    Timber.e(e);
                }
                if (callback != null) {
                    callback.onError(e);
                }
            }

            @Override
            public void onComplete() {
                if (callback != null)
                    callback.onComplete();
            }
        });
        return this;
    }

    public interface EmitterCallback&lt;T&gt; {
        void getEmitDatas(List&lt;T&gt; datas) throws Exception;
    }

    public interface FutureCallback&lt;T&gt; {
        T call();
    }


    public interface FunctionCallback&lt;T, Q&gt; {
        SimpleRxJava2&lt;Q&gt; apply(@NonNull T t) throws Exception;
    }


    public interface Transform&lt;T, Q&gt; {
        Q apply(T t);
    }

    public interface ApplyCallback&lt;H, Q, T&gt; {
        T apply(H h, Q q);
    }

    public static class ConsumerCallback&lt;T&gt; {

        public void onStart(Disposable d) {
        }

        public void onReceive(T data) {
        }

        public void onError(Throwable t) {
        }

        public void onComplete() {
        }
    }


    public static Scheduler getIoScheduler(){
        return Schedulers.io();
    }

    public SimpleRxJava2&lt;T&gt; subscribeOnIO() {
        return new SimpleRxJava2&lt;&gt;(getObservable().subscribeOn(Schedulers.io()));
    }

    public SimpleRxJava2&lt;T&gt; subscribeOnMain() {
        return subscribeOn(AndroidSchedulers.mainThread());
    }

    public SimpleRxJava2&lt;T&gt; subscribeOnLine() {
        return subscribeOn(Schedulers.trampoline());
    }

    public SimpleRxJava2&lt;T&gt; subscribeOn(Scheduler scheduler) {
        return new SimpleRxJava2&lt;&gt;(getObservable().subscribeOn(scheduler));
    }

    public SimpleRxJava2&lt;T&gt; observeOnIO() {
        return observeOn(Schedulers.io());
    }

    public SimpleRxJava2&lt;T&gt; observeOnMain() {
        return observeOn(AndroidSchedulers.mainThread());
    }

    public SimpleRxJava2&lt;T&gt; observeOn(Scheduler scheduler) {
        return new SimpleRxJava2&lt;&gt;(getObservable().observeOn(scheduler));
    }


    public SimpleRxJava2&lt;T&gt; switchThread() {
        return new SimpleRxJava2&lt;&gt;(getObservable().subscribeOn(Schedulers.io()).observeOn
                (AndroidSchedulers.mainThread()));
    }

    public SimpleRxJava2&lt;T&gt; singleThread() {
        Scheduler scheduler = Schedulers.from(Executors.newSingleThreadExecutor());
        return new SimpleRxJava2&lt;&gt;(getObservable().subscribeOn(scheduler).observeOn
                (scheduler));
    }

    public Observable&lt;T&gt; getObservable() {
        return mObservable;
    }
}
</code></pre></div></div>
:ET