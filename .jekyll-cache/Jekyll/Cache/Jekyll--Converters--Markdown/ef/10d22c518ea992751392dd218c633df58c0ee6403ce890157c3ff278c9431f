I"|<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>动态类型，静态类型
强类型，弱类型
编译型，解释型
</code></pre></div></div>

<h3 id="ntp">NTP</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://blog.csdn.net/dawnwang/article/details/1768516
网络延迟计算
客户端发送请求时间T1
服务端接收到请求时间T2
服务端发送响应时间T3
客户端接收响应时间T4

客户端与服务端时间差t
客户端与服务端一次请求响应耗费时间d
</code></pre></div></div>
<h3 id="lean-six-sigma">Lean Six Sigma</h3>

<h3 id="nginx">Nginx</h3>

<h3 id="redis">Redis</h3>

<h3 id="memcached">Memcached</h3>

<h3 id="io多路复用">IO多路复用</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>第一种方法就是最传统的多进程并发模型 (每进来一个新的I/O流会分配一个新的进程管理。)
第二种方法就是I/O多路复用 (单个线程，通过记录跟踪每个I/O流(sock)的状态，来同时管理多个I/O流 。)

I/O多路复用的优势并不是对于单个连接能处理的更快，而是在于可以在单个线程/进程中处理更多的连接。
与多进程和多线程技术相比，I/O多路复用技术的最大优势是系统开销小，系统不必创建进程/线程，也不必维护这些进程/线程，从而大大减小了系统的开销。


select poll epoll
</code></pre></div></div>

<h3 id="zookeeper">Zookeeper</h3>

<h3 id="hadoop">Hadoop</h3>

<h3 id="directx">DirectX</h3>
<p>dxdiag</p>

<h3 id="kotlin">kotlin</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>高阶函数
密封类
解构
lambda 
	val sum: (Int, Int) -&gt; Int = { x, y -&gt; x + y } Kotlin协程
</code></pre></div></div>

<p>协作式多任务
抢占式多任务</p>

<p>进程
	资源管理的最小单位
线程
	程序执行的最小单位
协程
	用户控制线程调度合理复用线程；舍弃内核的线程调度器，用户态调度协程</p>

<p>协变out
	因此，对于 out 泛型，我们能够将使用子类泛型的对象赋值给使用父类泛型的对象。
	val production1 : Production<Food> = FoodStore()
	val production2 : Production<Food> = FastFoodStore()
	val production3 : Production<Food> = InOutBurger()
逆变in
	因此，对于 in 泛型，我们可以将使用父类泛型的对象赋值给使用子类泛型的对象。
	val consumer1 : Consumer<Burger> = Everybody()
	val consumer2 : Consumer<Burger> = ModernPeople()
	val consumer3 : Consumer<Burger> = American()</Burger></Burger></Burger></Food></Food></Food></p>

<h3 id="注解">注解</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>运行时注解（反射）
	IntDef和StringDef注解；替代枚举
	资源类型注解；
	Null注解；
	其他实用注解
编译时注解
	注解 annotation
	注解处理器 compiler AbstractProcessor
	API
</code></pre></div></div>

<h3 id="epoll">epoll</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>用户空间
内核空间
	内核空间--内核的缓冲区--用户空间


阻塞
非阻塞
IO多路复用
异步
</code></pre></div></div>

<h3 id="tcp协议">TCP协议？</h3>

<h3 id="设计模式">设计模式</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>用抽象构建框架，用实现扩展细节
单一职责原则
	不要存在多于一个导致类变更的原因。通俗的说，即一个类只负责一项职责。
开闭原则
	一个软件实体如类、模块和函数应该对扩展开放，对修改关闭
里氏替换原则	
	所有引用基类的地方必须能透明地使用其子类的对象
依赖倒置原则
	高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象（依赖倒置原则的核心就是要我们面向接口编程，理解了面向接口编程，也就理解了依赖倒置。）
接口隔离原则
	客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上
迪米特法则（最少知道原则）
	一个对象应该对其他对象保持最少的了解 单一职责原则告诉我们实现类要职责单一；里氏替换原则告诉我们不要破坏继承体系；依赖倒置原则告诉我们要面向接口编程；接口隔离原则告诉我们在设计接口的时候要精简单一；迪米特法则告诉我们要降低耦合。而开闭原则是总纲，他告诉我们要对扩展开放，对修改关闭
</code></pre></div></div>

<h3 id="netty">netty</h3>

<h3 id="前后端">前后端</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Html,XHtml,Html5,CSS,JavaScript,jQuery 
源码 
freeCodeCamps

JSP,PHP,ASP
编译 Tomcat 源码 SpringBoot

spring-springmvc-springboot-springcloud
</code></pre></div></div>

<h3 id="android">Android</h3>

<h3 id="公众号">公众号</h3>

<h3 id="小程序">小程序</h3>

<h3 id="spring-springmvc-struts2-hibernate">Spring SpringMVC struts2 hibernate</h3>

<h3 id="提取日期">提取日期</h3>
<p>=TEXT(G4,”yyyy-mm-dd”)</p>

<h3 id="组合字符串">组合字符串</h3>
<p>=CONCATENATE(“insert into users (ig,client_name,project_name,project_manager,du_lead,hire_date,eid) values (‘“,B4,”’,’“,C4,”’,’“,D4,”’,’“,E4,”’,’“,F4,”’,’“,TEXT(G4,”yyyy-mm-dd”),”’,’“,H4,”’);”)</p>

:ET